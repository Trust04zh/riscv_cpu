`ifndef RISCV_DEFS
`define RISCV_DEFS

/* supported instructions
*/

// architecture

`define XLEN 32
`define IALIGN 32
`define ILEN 32


// attr
// ATTR [hi:lo] {EXTEND, PC_UPDATE_MODE, ALU_OP, INST_FMT}
/*
  The controller takes fetched instruction as input, parse and figure out the
exact instruction it is, then output relevant attributes.
*/

// PC_UPDATE
`define PC_UPDATE_LEN 3
`define PC_UPDATE_PLUS_4 3'b000 // all others
`define PC_UPDATE_BRANCH_ZERO 3'b001 // beq, bge, bgeu
`define PC_UPDATE_BRANCH_N_ZERO 3'b010 // bne, blt, bltu
`define PC_UPDATE_JUMP 3'b011 // jal
`define PC_UPDATE_JR 3'b100 // jalr

// CACHE_D_WRITE_EN
`define CACHE_D_WRITE_DISABLED 1'B0
`define CACHE_D_WRITE_ENABLED 1'b1

// CACHE_D_WRITE (STORE)
// this should be used in cache module
`define CACHE_D_WRITE_LEN 2
`define CACHE_D_WRITE_DONT_CARE `CACHE_D_WRITE_SW
`define CACHE_D_WRITE_SW 2'b00
`define CACHE_D_WRITE_SH 2'b01
`define CACHE_D_WRITE_SB 2'b10

// CACHE_D_READ (LOAD)
`define CACHE_D_READ_LEN 3 
`define CACHE_D_READ_DONT_CARE `CACHE_D_READ_LW
`define CACHE_D_READ_LW 3'b000
`define CACHE_D_READ_LH 3'b001
`define CACHE_D_READ_LHU 3'b010
`define CACHE_D_READ_LB 3'b011
`define CACHE_D_READ_LBU 3'b100

// ALU_SRC2
`define ALU_SRC2_DONT_CARE `ALU_SRC2_RS2
`define ALU_SRC2_RS2 1'b0
`define ALU_SRC2_IMM 1'b1 

// IMM_2_EXTEND
`define IMM_2_EXTEND_DONT_CARE `IMM_2_EXTEND_12
`define IMM_2_EXTEND_12 1'b0
`define IMM_2_EXTEND_5 1'b1 // shift operations


/*
  ALU takes responsibility for general arithmetic operations but takes no 
responsibility for instruction-specific arithmetic operations. For example, 
auipc requires (imm << 12) & (pc & 0x00000fff), which is the latter case, 
so ALU has no specific operation for it.
general arithmetic operation but 
*/
// ALU_OP
`define ALU_OP_LEN 4
`define ALU_OP_NONE `ALU_OP_ADD // jal, lui, auipc
`define ALU_OP_ADD 4'b0000 // add, addi, lb, lh, lw, lbu, lhu, sb, sh, sh, jalr
`define ALU_OP_SUB 4'b0001 // sub
`define ALU_OP_AND 4'b0010 // and, andi
`define ALU_OP_OR 4'b0011 // or, ori
`define ALU_OP_XOR 4'b0100 // xor, xori, beq, bne
`define ALU_OP_SLL 4'b0101 // sll, slli
`define ALU_OP_SRL 4'b0110 // srl, srli
`define ALU_OP_SRA 4'b0111 // sra, srai
`define ALU_OP_SLT 4'b1000 // slt, slti, blt, bge
`define ALU_OP_SLTU 4'b1001 // sltu, sltiu, bltu, bgeu

// REG_WRITE_EN
`define REG_WRITE_DISABLED 1'b0 // 
`define REG_WRITE_ENABLED 1'b1 // 

// REG_WRITE
`define REG_WRITE_LEN 3
`define REG_WRITE_DONT_CARE `REG_WRITE_ALU
`define REG_WRITE_ALU 3'b000
`define REG_WRITE_MEM 3'b001
`define REG_WRITE_PC 3'b010
`define REG_WRITE_LUI 3'b011
`define REG_WRITE_AUIPC 3'b100

// INST_FMT
// see instruction section for mask bits for each format
`define INST_FMT_LEN 3
`define INST_FMT_R 3'b000
`define INST_FMT_I 3'b001
`define INST_FMT_B 3'b010
`define INST_FMT_S 3'b011
`define INST_FMT_J 3'b100
`define INST_FMT_U 3'b101

// instruction
`define INST_FMT_R_MASK 32'b1111111_00000_00000_111_00000_1111111
`define INST_FMT_I_MASK 32'b000000000000_00000_111_00000_1111111
`define INST_FMT_B_MASK `INST_FMT_S_MASK
`define INST_FMT_S_MASK 32'b0000000_00000_00000_111_00000_1111111
`define INST_FMT_J_MASK `INST_FMT_U_MASK
`define INST_FMT_U_MASK 32'b00000000000000000000_00000_1111111

// , R-FMT
`define INST_MASK_ADD `INST_FMT_R_MASK
`define INST_PATT_ADD 32'b0000000_00000_00000_000_00000_0110011
`define INST_ATTR_ADD {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_ADD, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_R}

`define INST_MASK_SUB `INST_FMT_R_MASK
`define INST_PATT_SUB 32'b0100000_00000_00000_000_00000_0110011
`define INST_ATTR_SUB {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_SUB, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_R}

`define INST_MASK_XOR `INST_FMT_R_MASK
`define INST_PATT_XOR 32'b0000000_00000_00000_100_00000_0110011
`define INST_ATTR_XOR {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_XOR, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_R}

`define INST_MASK_OR `INST_FMT_R_MASK
`define INST_PATT_OR 32'b0000000_00000_00000_110_00000_0110011
`define INST_ATTR_OR {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_OR, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_R}

`define INST_MASK_AND `INST_FMT_R_MASK
`define INST_PATT_AND 32'b0000000_00000_00000_111_00000_0110011
`define INST_ATTR_AND {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_AND, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_R}

`define INST_MASK_SLL `INST_FMT_R_MASK
`define INST_PATT_SLL 32'b0000000_00000_00000_001_00000_0110011
`define INST_ATTR_SLL {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_SLL, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_R}

`define INST_MASK_SRL `INST_FMT_R_MASK
`define INST_PATT_SRL 32'b0000000_00000_00000_101_00000_0110011
`define INST_ATTR_SRL {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_SRL, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_R}

`define INST_MASK_SRA `INST_FMT_R_MASK
`define INST_PATT_SRA 32'b0100000_00000_00000_101_00000_0110011
`define INST_ATTR_SRA {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_SRA, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_R}

`define INST_MASK_SLT `INST_FMT_R_MASK
`define INST_PATT_SLT 32'b0000000_00000_00000_010_00000_0110011
`define INST_ATTR_SLT {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_SLT, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_R}

`define INST_MASK_SLTU `INST_FMT_R_MASK
`define INST_PATT_SLTU 32'b0000000_00000_00000_011_00000_0110011
`define INST_ATTR_SLTU {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_SLTU, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_R}

// , I-FMT
`define INST_MASK_ADDI `INST_FMT_I_MASK
`define INST_PATT_ADDI 32'b0000000_00000_00000_000_00000_0010011
`define INST_ATTR_ADDI {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_IMM, `IMM_2_EXTEND_12, `ALU_OP_ADD, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_I}

`define INST_MASK_XORI `INST_FMT_I_MASK
`define INST_PATT_XORI 32'b0000000_00000_00000_100_00000_0010011
`define INST_ATTR_XORI {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_IMM, `IMM_2_EXTEND_12, `ALU_OP_XOR, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_I}

`define INST_MASK_ORI `INST_FMT_I_MASK
`define INST_PATT_ORI 32'b0000000_00000_00000_110_00000_0010011
`define INST_ATTR_ORI {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_IMM, `IMM_2_EXTEND_12, `ALU_OP_OR, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_I}

`define INST_MASK_ANDI `INST_FMT_I_MASK
`define INST_PATT_ANDI 32'b0000000_00000_00000_111_00000_0010011
`define INST_ATTR_ANDI {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_IMM, `IMM_2_EXTEND_12, `ALU_OP_AND, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_I}

`define INST_MASK_SLLI `INST_FMT_I_MASK
`define INST_PATT_SLLI 32'b0000000_00000_00000_001_00000_0010011
`define INST_ATTR_SLLI {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_IMM, `IMM_2_EXTEND_5, `ALU_OP_SLL, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_I}


`define INST_MASK_SRLI `INST_FMT_I_MASK
`define INST_PATT_SRLI 32'b0000000_00000_00000_101_00000_0010011
`define INST_ATTR_SRLI {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_IMM, `IMM_2_EXTEND_5, `ALU_OP_SRL, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_I}

// sra, I format, but requires a mask for inst[30]
`define INST_MASK_SRAI `INST_FMT_R_MASK
`define INST_PATT_SRAI 32'b0100000_00000_00000_101_00000_0010011
`define INST_ATTR_SRAI {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_IMM, `IMM_2_EXTEND_5, `ALU_OP_SRA, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_I}

`define INST_MASK_SLTI `INST_FMT_I_MASK
`define INST_PATT_SLTI 32'b0000000_00000_00000_010_00000_0010011
`define INST_ATTR_SLTI {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_IMM, `IMM_2_EXTEND_12, `ALU_OP_SLT, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_I}

`define INST_MASK_SLTIU `INST_FMT_I_MASK
`define INST_PATT_SLTIU 32'b0000000_00000_00000_011_00000_0010011
`define INST_ATTR_SLTIU {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_IMM, `IMM_2_EXTEND_12, `ALU_OP_SLTU, `REG_WRITE_ENABLED, `REG_WRITE_ALU, `INST_FMT_I}

// load instructions, L-FMT
`define INST_MASK_LB `INST_FMT_I_MASK
`define INST_PATT_LB 32'b0000000_00000_00000_000_00000_0000011
`define INST_ATTR_LB {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_LB, `ALU_SRC2_IMM, `IMM_2_EXTEND_12, `ALU_OP_ADD, `REG_WRITE_ENABLED, `REG_WRITE_MEM, `INST_FMT_I}

`define INST_MASK_LH `INST_FMT_I_MASK
`define INST_PATT_LH 32'b0000000_00000_00000_001_00000_0000011
`define INST_ATTR_LH {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_LH, `ALU_SRC2_IMM, `IMM_2_EXTEND_12, `ALU_OP_ADD, `REG_WRITE_ENABLED, `REG_WRITE_MEM, `INST_FMT_I}

`define INST_MASK_LW `INST_FMT_I_MASK
`define INST_PATT_LW 32'b0000000_00000_00000_010_00000_0000011
`define INST_ATTR_LW {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_LW, `ALU_SRC2_IMM, `IMM_2_EXTEND_12, `ALU_OP_ADD, `REG_WRITE_ENABLED, `REG_WRITE_MEM, `INST_FMT_I}

`define INST_MASK_LBU `INST_FMT_I_MASK
`define INST_PATT_LBU 32'b0000000_00000_00000_100_00000_0000011
`define INST_ATTR_LBU {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_LBU, `ALU_SRC2_IMM, `IMM_2_EXTEND_12, `ALU_OP_ADD, `REG_WRITE_ENABLED, `REG_WRITE_MEM, `INST_FMT_I}

`define INST_MASK_LHU `INST_FMT_I_MASK
`define INST_PATT_LHU 32'b0000000_00000_00000_101_00000_0000011
`define INST_ATTR_LHU {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_LHU, `ALU_SRC2_IMM, `IMM_2_EXTEND_12, `ALU_OP_ADD, `REG_WRITE_ENABLED, `REG_WRITE_MEM, `INST_FMT_I}

// save instructions, S-FMT
`define INST_MASK_SB `INST_FMT_S_MASK
`define INST_PATT_SB 32'b0000000_00000_00000_000_00000_0100011
`define INST_ATTR_SB {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_ENABLED, `CACHE_D_WRITE_SB, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_IMM, `IMM_2_EXTEND_12, `ALU_OP_ADD, `REG_WRITE_DISABLED, `REG_WRITE_DONT_CARE, `INST_FMT_S}

`define INST_MASK_SH `INST_FMT_S_MASK
`define INST_PATT_SH 32'b0000000_00000_00000_001_00000_0100011
`define INST_ATTR_SH {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_ENABLED, `CACHE_D_WRITE_SH, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_IMM, `IMM_2_EXTEND_12, `ALU_OP_ADD, `REG_WRITE_DISABLED, `REG_WRITE_DONT_CARE, `INST_FMT_S}

`define INST_MASK_SW `INST_FMT_S_MASK
`define INST_PATT_SW 32'b0000000_00000_00000_010_00000_0100011
`define INST_ATTR_SW {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_ENABLED, `CACHE_D_WRITE_SW, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_IMM, `IMM_2_EXTEND_12, `ALU_OP_ADD, `REG_WRITE_DISABLED, `REG_WRITE_DONT_CARE, `INST_FMT_S}

// conditional branch instructions, B-FMT
`define INST_MASK_BEQ `INST_FMT_B_MASK
`define INST_PATT_BEQ 32'b0000000_00000_00000_000_00000_1100011
`define INST_ATTR_BEQ {`PC_UPDATE_BRANCH_ZERO, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_XOR, `REG_WRITE_DISABLED, `REG_WRITE_DONT_CARE, `INST_FMT_B}

`define INST_MASK_BNE `INST_FMT_B_MASK
`define INST_PATT_BNE 32'b0000000_00000_00000_001_00000_1100011
`define INST_ATTR_BNE {`PC_UPDATE_BRANCH_N_ZERO, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_XOR, `REG_WRITE_DISABLED, `REG_WRITE_DONT_CARE, `INST_FMT_B}

`define INST_MASK_BLT `INST_FMT_B_MASK
`define INST_PATT_BLT 32'b0000000_00000_00000_100_00000_1100011
`define INST_ATTR_BLT {`PC_UPDATE_BRANCH_N_ZERO, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_SLT, `REG_WRITE_DISABLED, `REG_WRITE_DONT_CARE, `INST_FMT_B}

`define INST_MASK_BGE `INST_FMT_B_MASK
`define INST_PATT_BGE 32'b0000000_00000_00000_101_00000_1100011
`define INST_ATTR_BGE {`PC_UPDATE_BRANCH_ZERO, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_SLT, `REG_WRITE_DISABLED, `REG_WRITE_DONT_CARE, `INST_FMT_B}

`define INST_MASK_BLTU `INST_FMT_B_MASK
`define INST_PATT_BLTU 32'b0000000_00000_00000_110_00000_1100011
`define INST_ATTR_BLTU {`PC_UPDATE_BRANCH_N_ZERO, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_SLTU, `REG_WRITE_DISABLED, `REG_WRITE_DONT_CARE, `INST_FMT_B}

`define INST_MASK_BGEU `INST_FMT_B_MASK
`define INST_PATT_BGEU 32'b0000000_00000_00000_111_00000_1100011
`define INST_ATTR_BGEU {`PC_UPDATE_BRANCH_ZERO, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_SLTU, `REG_WRITE_DISABLED, `REG_WRITE_DONT_CARE, `INST_FMT_B}

// unconditional jump instructions
`define INST_MASK_JAL `INST_FMT_J_MASK
`define INST_PATT_JAL 32'b00000000000000000000_00000_1101111
`define INST_ATTR_JAL {`PC_UPDATE_JUMP, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_DONT_CARE, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_NONE, `REG_WRITE_ENABLED, `REG_WRITE_PC, `INST_FMT_J}

`define INST_MASK_JALR `INST_FMT_I_MASK
`define INST_PATT_JALR 32'b0000000_00000_00000_000_00000_1100111
`define INST_ATTR_JALR {`PC_UPDATE_JR, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_IMM, `IMM_2_EXTEND_12, `ALU_OP_ADD, `REG_WRITE_ENABLED, `REG_WRITE_PC, `INST_FMT_I} 

// U-FMT instructions
`define INST_MASK_LUI `INST_FMT_U_MASK
`define INST_PATT_LUI 32'b00000000000000000000_00000_0110111
`define INST_ATTR_LUI {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_DONT_CARE, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_NONE, `REG_WRITE_ENABLED, `REG_WRITE_LUI, `INST_FMT_U}

`define INST_MASK_AUIPC `INST_FMT_U_MASK
`define INST_PATT_AUIPC 32'b00000000000000000000_00000_0010111
`define INST_ATTR_AUIPC {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_DONT_CARE, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_NONE, `REG_WRITE_ENABLED, `REG_WRITE_AUIPC, `INST_FMT_U}

/*
  not identical as the pseudo instruction "nop", 
but plays no side effect except for updating the PC by 4
*/
`define INST_ATTR_NOP {`PC_UPDATE_PLUS_4, `CACHE_D_WRITE_DISABLED, `CACHE_D_WRITE_DONT_CARE, `CACHE_D_READ_DONT_CARE, `ALU_SRC2_RS2, `IMM_2_EXTEND_DONT_CARE, `ALU_OP_ADD, `REG_WRITE_DISABLED, `REG_WRITE_ALU, `INST_FMT_R}

// // ecall, R-FMT, but 
// `define INST_MASK_ECALL `INST_FMT_R_MASK
// `define INST_PATT_ECALL 32'b0000000_00000_00000_000_00000_1110011
// `define INST_ATTR_ECALL 

// // ebreak

`endif // RISCV_DEFS