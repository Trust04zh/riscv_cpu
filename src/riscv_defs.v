// architecture

`define XLEN 32

// instruction

`define INST_FMT_R_MASK 32'b1111111_00000_00000_111_00000_1111111
`define INST_FMT_I_MASK 32'b000000000000_00000_111_00000_11111111
`define INST_FMT_B_MASK INST_FMT_S_MASK
`define INST_FMT_S_MASK 32'b0000000_00000_00000_111_00000_11111111
`define INST_FMT_J_MASK INST_FMT_U_MASK
`define INST_FMT_U_MASK 32'b00000000000000000000_00000_11111111

// ATTR [hi:lo] {EXTEND, ALU_OP, INST_FMT}

// , R-FMT
`define INST_MASK_ADD INST_FMT_R_MASK
`define INST_PATT_ADD 32'b0000000_00000_00000_000_00000_0110011
`define INST_ATTR_ADD 

`define INST_MASK_SUB INST_FMT_R_MASK
`define INST_PATT_SUB 32'b0100000_00000_00000_000_00000_0110011
`define INST_ATTR_SUB 

`define INST_MASK_XOR INST_FMT_R_MASK
`define INST_PATT_XOR 32'b0000000_00000_00000_100_00000_0110011
`define INST_ATTR_XOR 

`define INST_MASK_OR INST_FMT_R_MASK
`define INST_PATT_OR 32'b0000000_00000_00000_110_00000_0110011
`define INST_ATTR_OR 

`define INST_MASK_AND INST_FMT_R_MASK
`define INST_PATT_AND 32'b0000000_00000_00000_111_00000_0110011
`define INST_ATTR_AND

`define INST_MASK_SLL INST_FMT_R_MASK
`define INST_PATT_SLL 32'b0000000_00000_00000_001_00000_0110011
`define INST_ATTR_SLL

`define INST_MASK_SRL INST_FMT_R_MASK
`define INST_PATT_SRL 32'b0000000_00000_00000_101_00000_0110011
`define INST_ATTR_SRL

`define INST_MASK_SRA INST_FMT_R_MASK
`define INST_PATT_SRA 32'b0100000_00000_00000_101_00000_0110011
`define INST_ATTR_SRA

`define INST_MASK_SLT INST_FMT_R_MASK
`define INST_PATT_SLT 32'b0000000_00000_00000_010_00000_0110011
`define INST_ATTR_SLT

`define INST_MASK_SLTU INST_FMT_R_MASK
`define INST_PATT_SLTU 32'b0000000_00000_00000_011_00000_0110011
`define INST_ATTR_SLTU

// , I-FMT
`define INST_MASK_ADDI INST_FMT_I_MASK
`define INST_PATT_ADDI 32'b0000000_00000_00000_000_00000_0010011
`define INST_ATTR_ADDI 

`define INST_MASK_XORI INST_FMT_I_MASK
`define INST_PATT_XORI 32'b0000000_00000_00000_100_00000_0010011
`define INST_ATTR_XORI 

`define INST_MASK_ORI INST_FMT_I_MASK
`define INST_PATT_ORI 32'b0000000_00000_00000_110_00000_0010011
`define INST_ATTR_ORI 

`define INST_MASK_ANDI INST_FMT_I_MASK
`define INST_PATT_ANDI 32'b0000000_00000_00000_111_00000_0010011
`define INST_ATTR_ANDI 

`define INST_MASK_SLLI INST_FMT_I_MASK
`define INST_PATT_SLLI 32'b0000000_00000_00000_001_00000_0010011
`define INST_ATTR_SLLI 


`define INST_MASK_SRLI INST_FMT_I_MASK
`define INST_PATT_SRLI 32'b0000000_00000_00000_101_00000_0010011
`define INST_ATTR_SRLI 

// 
`define INST_MASK_SRAI INST_FMT_R_MASK
`define INST_PATT_SRAI 32'b0100000_00000_00000_101_00000_0010011
`define INST_ATTR_SRAI 

`define INST_MASK_SLTI INST_FMT_I_MASK
`define INST_PATT_SLTI 32'b0000000_00000_00000_010_00000_0010011
`define INST_ATTR_SLTI 

`define INST_MASK_SLTIU INST_FMT_I_MASK
`define INST_PATT_SLTIU 32'b0000000_00000_00000_011_00000_0010011
`define INST_ATTR_SLTIU 

// load instructions, L-FMT
`define INST_MASK_LB INST_FMT_I_MASK
`define INST_PATT_LB 32'b0000000_00000_00000_000_00000_0000011
`define INST_ATTR_LB

`define INST_MASK_LH INST_FMT_I_MASK
`define INST_PATT_LH 32'b0000000_00000_00000_001_00000_0000011
`define INST_ATTR_LH

`define INST_MASK_LW INST_FMT_I_MASK
`define INST_PATT_LW 32'b0000000_00000_00000_010_00000_0000011
`define INST_ATTR_LW

`define INST_MASK_LBU INST_FMT_I_MASK
`define INST_PATT_LBU 32'b0000000_00000_00000_100_00000_0000011
`define INST_ATTR_LBU

`define INST_MASK_LHU INST_FMT_I_MASK
`define INST_PATT_LHU 32'b0000000_00000_00000_101_00000_0000011
`define INST_ATTR_LHU

// save instructions, S-FMT
`define INST_MASK_SB INST_FMT_S_MASK
`define INST_PATT_SB 32'b0000000_00000_00000_000_00000_0100011
`define INST_ATTR_SB

`define INST_MASK_SH INST_FMT_S_MASK
`define INST_PATT_SH 32'b0000000_00000_00000_001_00000_0100011
`define INST_ATTR_SH

`define INST_MASK_SW INST_FMT_S_MASK
`define INST_PATT_SW 32'b0000000_00000_00000_010_00000_0100011
`define INST_ATTR_SW

// conditional branch instructions, B-FMT
`define INST_MASK_BEQ INST_FMT_B_MASK
`define INST_PATT_BEQ 32'b0000000_00000_00000_000_00000_1100011
`define INST_ATTR_BEQ

`define INST_MASK_BNE INST_FMT_B_MASK
`define INST_PATT_BNE 32'b0000000_00000_00000_001_00000_1100011
`define INST_ATTR_BNE

`define INST_MASK_BLT INST_FMT_B_MASK
`define INST_PATT_BLT 32'b0000000_00000_00000_100_00000_1100011
`define INST_ATTR_BLT

`define INST_MASK_BGE INST_FMT_B_MASK
`define INST_PATT_BGE 32'b0000000_00000_00000_101_00000_1100011
`define INST_ATTR_BGE

`define INST_MASK_BLTU INST_FMT_B_MASK
`define INST_PATT_BLTU 32'b0000000_00000_00000_110_00000_1100011
`define INST_ATTR_BLTU

`define INST_MASK_BGEU INST_FMT_B_MASK
`define INST_PATT_BGEU 32'b0000000_00000_00000_111_00000_1100011
`define INST_ATTR_BGEU

// unconditional jump instructions
`define INST_MASK_JAL
`define INST_PATT_JAL 32'b00000000000000000000_00000_1101111
`define INST_ATTR_JAL

`define INST_MASK_JALR
`define INST_PATT_JALR 32'b0000000_00000_00000_000_00000_1100111
`define INST_ATTR_JALR 

// U-FMT instructions
`define INST_MASK_LUI INST_FMT_U_MASK
`define INST_PATT_LUI 32'b00000000000000000000_00000_0110111
`define INST_ATTR_LUI 

`define INST_MASK_AUIPC INST_FMT_U_MASK
`define INST_PATT_AUIPC 32'b00000000000000000000_00000_0010111
`define INST_ATTR_AUIPC 

// ecall, R-FMT, but ***
`define INST_MASK_ECALL INST_FMT_R_MASK
`define INST_PATT_ECALL 32'b0000000_00000_00000_000_00000_1110011
`define INST_ATTR_ECALL 

// ebreak